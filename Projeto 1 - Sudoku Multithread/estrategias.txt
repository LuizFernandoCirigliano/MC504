Estratégias multithread adotadas em cada módulo:

sudoku_dica.c:

Neste módulo lançamos uma thread para cada posição vazia da matriz
de entrada, ou seja, cada thread verifica quais os números possíveis
para uma única posição vazia da matriz original. Essa abordagem garante
a independência de cada thread, isto é, uma não depende da outra e cada
uma altera variáveis diferentes, não gerando condição de corrida e os
problemas decorrentes dessa situação. O número de threads não é fixo, mas
aumenta conforme aumentam as posições vazias na matriz de entrada chegando
no máximo a 81 threads, caso esse em que a matriz de entrada só possui
posições vazias. Esse aumento no número de threads pode deixar o algoritmo
mais lento do que se fosse executado com um número reduzido de threads.

sudoku_verifica.c:

Neste módulo, adotamos uma abordagem com um número reduzido de threads.
Desta vez, cada thread verifica se os elementos de uma linha ou uma coluna ou
um quadrante 3x3 da matriz de entrada original estão de acordo com as regras
do sudoku. Desse modo, para cobrir todas as posições da matriz de entrada,
precisamos criar exatamente 27 threads. Como este módulo só faz uma verificação
da matriz de entrada, não precisamos nos preocupar com diferentes threads
alterando os mesmos dados ou variáveis. Além disso, como o número de threads
é fixo e a matriz de entrada tem sempre o mesmo tamanho, o tempo de execução
do algoritmo deve ser bem parecido para todos os casos, variando um pouco
de acordo com o número de erros encontrados em cada matriz.

sudoku_resolve.c:

Para resolver o sudoku, foi adotada uma estratégia de backtracking, usando threads
para paralelizar o processo. Em cada nível da recursão, era feita uma cópia da matriz,
para evitar problemas de acesso concorrente. Ao chegar em um ponto no qual existe mais
de uma possibilidade para completar o quadrado, existem duas possibilidades:

	a) Se o número máximo de threads já está aberto, a continuação da execução ocorre
	na própria thread. 

	b) Se o número máximo de threads ainda não foi alcançado, cria-se uma nova thread
	para a possível escolha.

O limite de threads pode não ser respeitado exatamente, pois como não usamos locks, poderia
haver uma situação de concorrência na qual duas threads são criadas simultaneamente, mas ele
serve de guia, pois se deixássemos que novas threads fossem criadas para cada nivel da recursão,
poderia haver problemas de memória.



